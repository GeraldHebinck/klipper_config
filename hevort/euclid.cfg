# from https://github.com/nionio6915/Euclid_Probe/blob/main/Firmware_Examples/Klipper/00-euclid_exampleV3.cfg
# on 15th of Feb 2022
# Dock Center at X=523, Y=532 
#  __________________________________________________________________________
#  |                                                                        |
#  |                                                                        |
#  |                                                                        |
#  |                                                                        |
#  |                                                                        |
#  |                                                                        |
#  |                                                                        |
#  |                                                                        |
#  |                                                                        |
#  |                                                                        |
#  |                                * Probe Ready Position                  |
#  |                                  X150 Y150                             |
#  |                                                                        |
#  |                                                                        |
#  | * Dock Re-entry staging  position                                      |
#  |   X0 Y70                                                               |
#  |                                                                        |
#  |                                                                        |
#  | * Dock Exit Position                                                   | 
#  |   X0 Y40                                                               |
#  |                                                                        |
#  |                                                                        |
#  |                                                                        |
#  |                                                                        |
#  |                                                                        |
#  |   X0 Y0    X30 Y0       X100 Y0                                        |
#  | * Dock   * Dock Side  * Dock Preflight                                 |
#  |________________________________________________________________________| 
#
# Above is example 300x300 bed to coorelate with macros and movements below.
# This example is for a fixed dock, fixed gantry/carraige and moving bed motion system. 
# RailCore, Ender5, V-Core3, etc...
# For moving gantry sytem like Voron 2.4, there are some subltle things to change.
# We have attempetd indicate those in the comments throughout the example code.   
# Z elevation is shown in movements to ensure adequate Z elevation to avoid crashes. 
# With the coupling magnets +/- 2mm of the nozzle the probe trigger height is on the
# ordeer of 12mm, so 15mm is used as a safe height.
#
# the printer.cfg-snip.txt has the following config settings 
# # 
# #...
# # ad this include statement at the head of the config file
# [include euclid.cfg]
# #
#
# #
# # enable enable_force_move to enable FORCE_MOVE and SET_KINEMATIC_POSIITION
# enable_force_move:true
# # ...
#
# It is assumed that there is a seperate Z-endstop that is used to home Z
# IF YOU ARE USING PROBE AS ENDSTOP AND PROBE homing_overide must be altered
#
# some configurtions may need FORCE_MOVE enabled for kinematic position functionS
# https://www.klipper3d.org/Config_Reference.html?h=force_move#force_move
#
# Movement Locations:
#    Users need to identify these locations and customize for their deployment: 
#       Pre-flight position X100 Y20 located to ensure clear travel path to dock
#       Dock Adjacent position X30 Y0 to provide short lateral travel for pickup and swipe off
#       Probe pickup over dock X0 Y0
#       Dock exit Position X0 Y40
#       Probe Ready Position X150 Y0 center of bed
#
# the above list of coordiantes get used in the movement macros below
#

[probe]
pin: P0.10
x_offset: 0
y_offset: 30.0
z_offset: 5.67
speed: 5
samples: 3
samples_result: median
sample_retract_dist: 2.0
samples_tolerance: 0.050
samples_tolerance_retries: 3
lift_speed: 50

#
# example homing overide to use Euclid as an endstop and Z-probe
# example assumes that the bed is 300x300
# assumes homing Z at center of bed
# assumes that macro for probe deploy and retract below are called M401 and M402
#
#

[homing_override]
axes: z
set_position_z: 0
gcode:
   STATUS_HOMING
   G90
   G1 Z20 F3000
   G28 X Y
   M401
   G1 X10 Y10 F18000
   G28 Z
   G1 Z20 F3000
   STATUS_READY

# Macro to Deploy Bed Probe
[gcode_macro M401]
gcode:
    QUERY_PROBE                 ; check probe status
    {action_respond_info("Entering M401")}
    ; error_if_probe_deployed    ; check to make sure that the probe is not already attached
    _M401

[gcode_macro error_if_probe_deployed]
gcode:
    QUERY_PROBE                 ; check probe status
    do_error_if_probe_deployed  ; logic check to verify probe is not already deployed

[gcode_macro do_error_if_probe_deployed]
gcode:
    {% if not printer.probe.last_query %}
      {action_raise_error("Euclid Probe is already deployed - Remove and Return it to the dock")}
    {% endif %}

# Macro to Deploy Bed Probe
[gcode_macro _M401]
gcode:
    G90
    {% if printer.probe.last_query %} 
      _approach_dock
      _position_side
      _position_probe
      _position_door
      _approach_dock
    {% endif %}
    error_if_probe_not_deployed
    {action_respond_info("Exiting M401")}

[gcode_macro error_if_probe_not_deployed]
gcode:
    QUERY_PROBE
    do_error_if_probe_not_deployed

[gcode_macro do_error_if_probe_not_deployed]
gcode:
    {% if printer.probe.last_query %}
      {action_raise_error("Euclid Probe failed to deploy!")}
    {% endif %}

# Macro to retract Bed Probe
[gcode_macro M402]
gcode:
    STATUS_BUSY
    QUERY_PROBE                 ; check probe status
    {action_respond_info("Entering M402")}
    ;error_if_probe_not_deployed
    _M402
    STATUS_READY

# Macro to Stow Bed Leveling Probe
[gcode_macro _M402]
gcode:
    G90
    {% if not printer.probe.last_query %} ; the logic on this needs function check
      _approach_dock
      _position_door
      _position_probe
      _position_side
      _approach_dock
    {% endif %}                     ;  exit the if-then loop. was missing in previous versions
    error_if_probe_deployed         ;  verify that the probe is detached. is corrected error  
    {action_respond_info("Exiting M402")}

# Definition of bed_mesh
[bed_mesh]
speed: 300
mesh_min: 25,25
mesh_max: 500,475
probe_count: 6,6
fade_start: 1.0
fade_end: 0.0
horizontal_move_z: 10

# Macro to perform a bed mesh calibration by wrapping it between M401/M402 macros
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
; gcode parameters
variable_parameter_AREA_START : 25,25
variable_parameter_AREA_END : 500,475
; the clearance between print area and probe area 
variable_mesh_area_offset : 5.0
; number of sample per probe point
variable_probe_samples : 3
; minimum probe count
variable_min_probe_count : 3
; scale up the probe count, should be 1.0 ~ < variable_max_probe_count/variable_min_probe_count
variable_probe_count_scale_factor : 1.0
gcode:
  STATUS_MESHING
  M401                           ; deploy Euclid Probe if needed
  {% if params.AREA_START and params.AREA_END %}
    {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
    {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
    {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
    {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
    {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

    {% set area_min_x = params.AREA_START.split(",")[0]|float %}
    {% set area_min_y = params.AREA_START.split(",")[1]|float %}
    {% set area_max_x = params.AREA_END.split(",")[0]|float %}
    {% set area_max_y = params.AREA_END.split(",")[1]|float %}

    {% if bedMeshConfig.probe_count.split(",")|length == 2 %}
      {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
      {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
    {% else %}
      {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
      {% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
    {% endif %}

    {% set meshMaxPointX = meshPointX %}
    {% set meshMaxPointY = meshPointY %}


    {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
      {% if area_min_x - mesh_area_offset >=  safe_min_x %}
        {% set area_min_x = area_min_x - mesh_area_offset %}
      {% else %}
        {% set area_min_x = safe_min_x %}
      {% endif %}

      {% if area_min_y - mesh_area_offset >=  safe_min_y %}
        {% set area_min_y = area_min_y - mesh_area_offset %}
      {% else %}
        {% set area_min_y = safe_min_y %}
      {% endif %}

      {% if area_max_x + mesh_area_offset <=  safe_max_x %}
        {% set area_max_x = area_max_x + mesh_area_offset %}
      {% else %}
        {% set area_max_x = safe_max_x %}
      {% endif %}

      {% if area_max_y + mesh_area_offset <=  safe_max_y %}
        {% set area_max_y = area_max_y + mesh_area_offset %}
      {% else %}
        {% set area_max_y = safe_max_y %}
      {% endif %}

      {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
      {% if meshPointX < min_probe_count %}
        {% set meshPointX = min_probe_count %}
      {% endif %}
      {% if meshPointX > meshMaxPointX %}
        {% set meshPointX = meshMaxPointX %}
      {% endif %}

      {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
      {% if meshPointY < min_probe_count %}
        {% set meshPointY = min_probe_count %}
      {% endif %}
      {% if meshPointY > meshMaxPointY %}
        {% set meshPointY = meshMaxPointY %}
      {% endif %}

      BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int}
    {% else %}
      BED_MESH_CALIBRATE_BASE
    {% endif %}
  {% else %}
    BED_MESH_CALIBRATE_BASE
  {% endif %}
  STATUS_READY

# Definition of z_tilt
[z_tilt]
z_positions: 
  -26.87,-20.4
  274.339,557.81
  575.548,-20.4
points:
	5,5
	262.5,475
	520,5
speed: 300
horizontal_move_z: 20
retries: 3
retry_tolerance: 0.1

# Macro to perform a modified z_tilt by wrapping it between M401/M402 macros
[gcode_macro Z_TILT_ADJUST]
rename_existing:    Z_TILT_ADJUST_ORIGINAL
gcode:
  STATUS_CALIBRATING_Z
  M401                           ; deploy Euclid Probe if needed
  Z_TILT_ADJUST_ORIGINAL         ; check bed level
  STATUS_READY

#### Positions for probe deploy 
[gcode_macro _approach_dock]
gcode:
      G90
      G1 Z20 F3000                 ;  set approach elevation of Z20 to clear probe over bed on fixed gantry machine
      G1 X463 Y472 F30000         ;  move the carraige to safe position to move from
      M400

[gcode_macro _position_side]
gcode:
      G90
      G1 X523 Y502 F3000          ;  move to the side of the dock
      M400

[gcode_macro _position_door]
gcode:
      G90
      G1 X483 Y532 F3000 
      M400

[gcode_macro _position_probe]
gcode:
      G90
      G1 X523 Y532 F1800 
      M400

